---
title: "specparam_sound_stimulation"
format: html
editor: source
---

# Load specparam

compare only the conditions before the tDCS stimulation


```{r}
# Load required libraries
library(brms) # For Bayesian regression models
library(dplyr) # For data manipulation
library(tidyr) # For data reshaping
library(readr) # For reading CSV files
library(here) # For file path management
library(ggsegDesterieux)
dir <- "chapter4/2_final_analysis/"
here::i_am(paste0(dir, "spectral_exponent.qmd"))
utils_env <- new.env()
source(here::here("src", "R", "utils.R"), local = utils_env)
source(here::here("src", "R", "rba_helpers.R"), local = utils_env)
# source( here::here("src", "R",  "Helpers.R"), local = utils_env)

my_brain_plot <- utils_env$my_brain_plot
extract_region_effects <- utils_env$extract_region_effects
# Load spectral parameters, removing redundant columns
df <- read_csv(
  here::here("chapter4/results/specparam_all.csv"),
  show_col_types = FALSE
) %>%
  select(
    !c("subject_session", "run", "session", "CF", "BW", "PW", "task", "ID")
  ) %>%
  distinct() %>%
  mutate(
    P = as.factor(P),
    T = as.factor(T),
    roi = as.factor(roi),
    S = as.factor(condition),
    subject = as.factor(subject)
  ) %>%
  filter(P == "pre") %>%
  select(!c("condition", "label")) %>%
  select(c("subject", "roi", "S", "P", "T"), everything())
```

# Loo

```{r}
n_cores <- 12
model_spectral_0 <- brm(
  formula = exponent ~ 1 + (1 | subject) + (1 | roi),
  data = df,
  # Student's t distribution to handle potential outliers
  family = student(),
  # MCMC settings
  chains = 4,
  iter = 4000,
  warmup = 1000,
  cores = n_cores,
  # Convergence helper
  control = list(adapt_delta = 0.95),
  # Save model for later use
  file = here::here(dir, "fits/model_spectral_0")
)

model_spectral_1 <- brm(
  formula = exponent ~ 1 + (1 + S | subject) + (1 + S | roi),
  data = df,
  # Student's t distribution to handle potential outliers
  family = student(),
  # MCMC settings
  chains = 4,
  iter = 4000,
  warmup = 1000,
  cores = n_cores,
  # Convergence helper
  control = list(adapt_delta = 0.95),
  # Save model for later use
  file = here::here(dir, "fits/model_spectral_1")
)


model_spectral_3 <- brm(
  formula = exponent ~ 1 + S + (1 + S | subject) + (1 + S | roi),
  data = df,
  # Student's t distribution to handle potential outliers
  family = student(),
  # MCMC settings
  chains = 4,
  iter = 4000,
  warmup = 1000,
  cores = n_cores,
  # Convergence helper
  control = list(adapt_delta = 0.95),
  # Save model for later use
  file = here::here(dir, "fits/model_spectral_3")
)
```

```{r}
# Get comparison results
comparison <- loo_compare(loo1, loo2)
print(comparison)

# EXTRACT AND ANALYZE RESULTS
# ============================

# Convert to data frame for easier manipulation
comp_df <- as.data.frame(comparison)
comp_df$model <- rownames(comp_df)

# Calculate evidence ratios
comp_df$evidence_ratio <- abs(comp_df$elpd_diff) / comp_df$se_diff
print(comp_df)
```

```{r}
source(here::here("src", "R", "rba_helpers.R"))
# Load required libraries
library(brms)
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(scales)

# After fitting your model
model_spectral_3 <- brm(
  formula = exponent ~ 1 + S + (1 + S | subject) + (1 + S | roi),
  data = df,
  family = student(),
  chains = 4,
  iter = 4000,
  warmup = 1000,
  cores = n_cores,
  control = list(adapt_delta = 0.95),
  file = "fits/model_spectral_3"
)

# Extract posterior samples
pe <- fixef(model_spectral_3, summary = FALSE) # Population-level estimates
re <- ranef(model_spectral_3, summary = FALSE) # Random effects

# Calculate number of posterior samples
ns <- nrow(pe)

# 1. ANALYZE STIMULUS EFFECT BY ROI
# Extract posterior samples for stimulus effect at each ROI
# Note: Adjust 'roi' if your ROI variable has a different name
ps_stimulus <- psROI(pe, re, 'S') # This gets S effect for each ROI

# Summarize stimulus effect across ROIs
stimulus_summary <- sumROI(ps_stimulus, ns, nd = 4)
print(stimulus_summary)

# Save summary to file
outDF(stimulus_summary, "spectral_exponent_stimulus_effect")

# 2. ANALYZE INTERCEPT (BASELINE) BY ROI
ps_intercept <- psROI(pe, re, 'Intercept')
intercept_summary <- sumROI(ps_intercept, ns, nd = 4)
print(intercept_summary)

# 3. CREATE VISUALIZATIONS

# Ridge plot for stimulus effect
ridge(
  ps_stimulus,
  xlim = range(ps_stimulus),
  labx = "Stimulus Effect on Exponent",
  wi = 10,
  hi = 8
)

# Ridge plot for intercept (baseline exponent)
ridge(
  ps_intercept,
  xlim = range(ps_intercept),
  labx = "Baseline Exponent",
  wi = 10,
  hi = 8
)

# Posterior density plots (adjust grid dimensions as needed)
plotPDP(
  "stimulus_effect",
  ps_stimulus,
  nR = ncol(ps_stimulus),
  nr = 4, # rows
  nc = 4, # columns
  w = 12
) # width

# 4. ANALYZE SPECIFIC CONTRASTS
# If you want to compare pre-stim vs stim conditions directly at ROI level
# Assuming S is coded as 0 (pre) and 1 (stim), the effect represents the difference

# 5. CREATE CUSTOM ANALYSIS FOR YOUR HYPOTHESES
# Example: Identify ROIs with strong evidence for stimulus effect
strong_evidence <- stimulus_summary[
  stimulus_summary$`P+` > 0.95 |
    stimulus_summary$`P+` < 0.05,
]
print("ROIs with strong evidence for stimulus effect:")
print(strong_evidence)

# 6. EXTRACT RESULTS FOR SPECIFIC ROIS OF INTEREST
# Example for auditory regions
auditory_rois <- c(
  "transversetemporal-lh",
  "transversetemporal-rh",
  "superiortemporal-lh",
  "superiortemporal-rh"
)
auditory_results <- stimulus_summary[
  rownames(stimulus_summary) %in% auditory_rois,
]
print("Auditory ROI results:")
print(auditory_results)

# 7. SAVE FULL RESULTS
save(
  model_spectral_3,
  pe,
  re,
  ps_stimulus,
  ps_intercept,
  stimulus_summary,
  intercept_summary,
  file = "spectral_exponent_analysis_results.RData"
)

# 8. CREATE A SUMMARY REPORT
cat(
  "===== Spectral Exponent Analysis Summary =====\n",
  file = "spectral_analysis_report.txt"
)
cat(
  "\nModel Formula: exponent ~ 1 + S + (1 + S| subject) + (1 + S | roi)\n",
  file = "spectral_analysis_report.txt",
  append = TRUE
)
cat(
  sprintf("\nTotal posterior samples: %d\n", ns),
  file = "spectral_analysis_report.txt",
  append = TRUE
)
cat(
  "\n--- Stimulus Effect by ROI ---\n",
  file = "spectral_analysis_report.txt",
  append = TRUE
)
outDF(stimulus_summary, "spectral_analysis_report")

# 9. OPTIONAL: Analyze interaction patterns
# If you have additional predictors or want to examine specific patterns
# Example: Extract subject-specific effects
subject_effects <- re$subject[,, "S"] # Subject-specific S effects
mean_subject_effect <- rowMeans(subject_effects)
sd_subject_effect <- apply(subject_effects, 1, sd)

# 10. CHECK MODEL DIAGNOSTICS WITH VISUALIZATION
# Create diagnostic plots
pp_check(model_spectral_3, ndraws = 100)
ggsave("model_pp_check.png", width = 8, height = 6)
```

```{r}
fixef(model_spectral_3) # Overall S effect
ranef(model_spectral_3)$roi # How each region deviates from global S effect

```

```{r}
loo0 <- loo(model_spectral_0)
loo1 <- loo(model_spectral_1)
loo2 <- loo(model_spectral_2)
loo3 <- loo(model_spectral_3)


```

```{r}
loo_compare(loo0, loo1, loo2, loo3)

```

# Visualisation

```{r}

effects <- extract_region_effects(
  model_spectral_basic,
  region_var = "roi", # Name of region variable
  parameter = "Intercept", # Parameter of interest
  digits = 8
)
df_filtered <- effects %>% filter(`P+` > 0.95 | `P+` < 0.05)
plot2 <- my_brain_plot(
  df_filtered,
  desterieux,
  mean,
  filltype = "RdYlBu",
  legend = TRUE
) +
  ggtitle("base ITPC")
print(plot2)

#  formula = itpc ~ 1 + P*T + (1 + P*T | roi) + (1 + P*T | subject),
```

✅ "Do individual subjects respond differently to stimulation?" ✅ "Do brain regions respond differently to stimulation?" ✅ "Is there substantial heterogeneity in stimulation effects?

```{r}
global_effects <- fixef(model_spectral_basic)
cat("GLOBAL EFFECT OF STIMULATION:\n")
print(global_effects)
```

```{r}

```

# Roi coefficients

```{r}
# Extract ROI-specific coefficients
roi_coefs <- coef(spectral_basic)$roi
roi_coef_df <- as.data.frame.table(roi_coefs)
names(roi_coef_df) <- c("roi", "parameter", "statistic", "value")

# Reshape to wide format for easier analysis
roi_effects_wide <- roi_coef_df %>%
  pivot_wider(
    id_cols = c(roi, parameter),
    names_from = statistic,
    values_from = value
  )

# Alternative wider version with parameter and statistic combined
roi_final_wide_alt <- roi_coef_df %>%
  mutate(param_stat = paste(statistic, parameter, sep = "_")) %>%
  # Pivot to final wide format
  pivot_wider(
    id_cols = roi,
    names_from = param_stat,
    values_from = value
  )

# Display results
print("ROI-specific effects:")
print(head(roi_effects_wide))
```

## Probability Analysis

```{r probability_analysis}
# Extract posterior samples for the ROI-specific effects
post_samples <- posterior_samples(spectral_basic, pars = "^r_roi")

# Create a function to calculate P+ values
# P+ is the probability of a positive effect if mean is positive,
# or probability of a negative effect if mean is negative
calculate_p_plus <- function(samples) {
  if (mean(samples) >= 0) {
    # For positive effects: proportion of samples > 0
    return(mean(samples > 0))
  } else {
    # For negative effects: proportion of samples < 0
    return(mean(samples < 0))
  }
}

# Calculate P+ for each parameter
p_plus_values <- sapply(post_samples, calculate_p_plus)

# Create a data frame with parameters and their P+ values
p_plus_df <- data.frame(
  parameter = names(p_plus_values),
  p_plus = p_plus_values
)

# Clean up parameter names to extract ROI and parameter components
p_plus_df$roi <- gsub("r_roi\\[(.*),.*", "\\1", p_plus_df$parameter)
p_plus_df$parameter <- gsub("r_roi\\[.*,(.*)]", "\\1", p_plus_df$parameter)

# Reshape to wide format with ROIs as rows and parameters as columns
p_plus_wide <- p_plus_df %>%
  pivot_wider(
    id_cols = roi,
    names_from = parameter,
    values_from = p_plus,
    names_prefix = "p_plus_" # Add "p_plus_" prefix to all new columns
  )

print("Probability values (P+) for each ROI parameter:")
print(p_plus_wide)
```